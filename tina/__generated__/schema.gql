# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  project(relativePath: String): Project!
  projectConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectFilter): ProjectConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  galleryImage(relativePath: String): GalleryImage!
  galleryImageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GalleryImageFilter): GalleryImageConnection!
  siteSettings(relativePath: String): SiteSettings!
  siteSettingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteSettingsFilter): SiteSettingsConnection!
}

input DocumentFilter {
  project: ProjectFilter
  post: PostFilter
  galleryImage: GalleryImageFilter
  siteSettings: SiteSettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Project | Post | GalleryImage | SiteSettings | Folder

type ProjectGallery {
  image: String
  alt: String
  caption: String
}

type ProjectMetrics {
  roi: String
  engagement: String
  efficiency: String
  custom1Label: String
  custom1Value: String
  custom2Label: String
  custom2Value: String
}

type Project implements Node & Document {
  title: String!
  slug: String!
  date: String!
  featured: Boolean
  status: String!
  heroImage: String
  gallery: [ProjectGallery]
  excerpt: String
  description: JSON
  techStack: [String]
  metrics: ProjectMetrics
  projectUrl: String
  githubUrl: String
  category: String!
  color: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ProjectGalleryFilter {
  image: ImageFilter
  alt: StringFilter
  caption: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ProjectMetricsFilter {
  roi: StringFilter
  engagement: StringFilter
  efficiency: StringFilter
  custom1Label: StringFilter
  custom1Value: StringFilter
  custom2Label: StringFilter
  custom2Value: StringFilter
}

input ProjectFilter {
  title: StringFilter
  slug: StringFilter
  date: DatetimeFilter
  featured: BooleanFilter
  status: StringFilter
  heroImage: ImageFilter
  gallery: ProjectGalleryFilter
  excerpt: StringFilter
  description: RichTextFilter
  techStack: StringFilter
  metrics: ProjectMetricsFilter
  projectUrl: StringFilter
  githubUrl: StringFilter
  category: StringFilter
  color: StringFilter
}

type ProjectConnectionEdges {
  cursor: String!
  node: Project
}

type ProjectConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectConnectionEdges]
}

type PostSeo {
  title: String
  description: String
  keywords: [String]
}

type Post implements Node & Document {
  title: String!
  slug: String!
  date: String!
  status: String!
  featured: Boolean
  heroImage: String
  excerpt: String
  content: JSON
  tags: [String]
  category: String!
  readTime: Float
  author: String
  seo: PostSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PostSeoFilter {
  title: StringFilter
  description: StringFilter
  keywords: StringFilter
}

input PostFilter {
  title: StringFilter
  slug: StringFilter
  date: DatetimeFilter
  status: StringFilter
  featured: BooleanFilter
  heroImage: ImageFilter
  excerpt: StringFilter
  content: RichTextFilter
  tags: StringFilter
  category: StringFilter
  readTime: NumberFilter
  author: StringFilter
  seo: PostSeoFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type GalleryImage implements Node & Document {
  title: String!
  image: String!
  alt: String!
  description: String
  category: String!
  tool: String
  date: String!
  tags: [String]
  featured: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GalleryImageFilter {
  title: StringFilter
  image: ImageFilter
  alt: StringFilter
  description: StringFilter
  category: StringFilter
  tool: StringFilter
  date: DatetimeFilter
  tags: StringFilter
  featured: BooleanFilter
}

type GalleryImageConnectionEdges {
  cursor: String!
  node: GalleryImage
}

type GalleryImageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GalleryImageConnectionEdges]
}

type SiteSettingsSite {
  title: String!
  description: String
  author: String
  email: String
  logo: String
  favicon: String
}

type SiteSettingsSocial {
  twitter: String
  linkedin: String
  github: String
  instagram: String
}

type SiteSettingsSeo {
  defaultTitle: String
  defaultDescription: String
  defaultImage: String
}

type SiteSettings implements Node & Document {
  site: SiteSettingsSite
  social: SiteSettingsSocial
  seo: SiteSettingsSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteSettingsSiteFilter {
  title: StringFilter
  description: StringFilter
  author: StringFilter
  email: StringFilter
  logo: ImageFilter
  favicon: ImageFilter
}

input SiteSettingsSocialFilter {
  twitter: StringFilter
  linkedin: StringFilter
  github: StringFilter
  instagram: StringFilter
}

input SiteSettingsSeoFilter {
  defaultTitle: StringFilter
  defaultDescription: StringFilter
  defaultImage: ImageFilter
}

input SiteSettingsFilter {
  site: SiteSettingsSiteFilter
  social: SiteSettingsSocialFilter
  seo: SiteSettingsSeoFilter
}

type SiteSettingsConnectionEdges {
  cursor: String!
  node: SiteSettings
}

type SiteSettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteSettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateProject(relativePath: String!, params: ProjectMutation!): Project!
  createProject(relativePath: String!, params: ProjectMutation!): Project!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateGalleryImage(relativePath: String!, params: GalleryImageMutation!): GalleryImage!
  createGalleryImage(relativePath: String!, params: GalleryImageMutation!): GalleryImage!
  updateSiteSettings(relativePath: String!, params: SiteSettingsMutation!): SiteSettings!
  createSiteSettings(relativePath: String!, params: SiteSettingsMutation!): SiteSettings!
}

input DocumentUpdateMutation {
  project: ProjectMutation
  post: PostMutation
  galleryImage: GalleryImageMutation
  siteSettings: SiteSettingsMutation
  relativePath: String
}

input DocumentMutation {
  project: ProjectMutation
  post: PostMutation
  galleryImage: GalleryImageMutation
  siteSettings: SiteSettingsMutation
}

input ProjectGalleryMutation {
  image: String
  alt: String
  caption: String
}

input ProjectMetricsMutation {
  roi: String
  engagement: String
  efficiency: String
  custom1Label: String
  custom1Value: String
  custom2Label: String
  custom2Value: String
}

input ProjectMutation {
  title: String
  slug: String
  date: String
  featured: Boolean
  status: String
  heroImage: String
  gallery: [ProjectGalleryMutation]
  excerpt: String
  description: JSON
  techStack: [String]
  metrics: ProjectMetricsMutation
  projectUrl: String
  githubUrl: String
  category: String
  color: String
}

input PostSeoMutation {
  title: String
  description: String
  keywords: [String]
}

input PostMutation {
  title: String
  slug: String
  date: String
  status: String
  featured: Boolean
  heroImage: String
  excerpt: String
  content: JSON
  tags: [String]
  category: String
  readTime: Float
  author: String
  seo: PostSeoMutation
}

input GalleryImageMutation {
  title: String
  image: String
  alt: String
  description: String
  category: String
  tool: String
  date: String
  tags: [String]
  featured: Boolean
}

input SiteSettingsSiteMutation {
  title: String
  description: String
  author: String
  email: String
  logo: String
  favicon: String
}

input SiteSettingsSocialMutation {
  twitter: String
  linkedin: String
  github: String
  instagram: String
}

input SiteSettingsSeoMutation {
  defaultTitle: String
  defaultDescription: String
  defaultImage: String
}

input SiteSettingsMutation {
  site: SiteSettingsSiteMutation
  social: SiteSettingsSocialMutation
  seo: SiteSettingsSeoMutation
}

schema {
  query: Query
  mutation: Mutation
}
