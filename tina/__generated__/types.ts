//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  project: Project;
  projectConnection: ProjectConnection;
  post: Post;
  postConnection: PostConnection;
  galleryImage: GalleryImage;
  galleryImageConnection: GalleryImageConnection;
  siteSettings: SiteSettings;
  siteSettingsConnection: SiteSettingsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryGalleryImageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGalleryImageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GalleryImageFilter>;
};


export type QuerySiteSettingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteSettingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteSettingsFilter>;
};

export type DocumentFilter = {
  project?: InputMaybe<ProjectFilter>;
  post?: InputMaybe<PostFilter>;
  galleryImage?: InputMaybe<GalleryImageFilter>;
  siteSettings?: InputMaybe<SiteSettingsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Project | Post | GalleryImage | SiteSettings | Folder;

export type ProjectGallery = {
  __typename?: 'ProjectGallery';
  image?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
  caption?: Maybe<Scalars['String']['output']>;
};

export type ProjectMetrics = {
  __typename?: 'ProjectMetrics';
  roi?: Maybe<Scalars['String']['output']>;
  engagement?: Maybe<Scalars['String']['output']>;
  efficiency?: Maybe<Scalars['String']['output']>;
  custom1Label?: Maybe<Scalars['String']['output']>;
  custom1Value?: Maybe<Scalars['String']['output']>;
  custom2Label?: Maybe<Scalars['String']['output']>;
  custom2Value?: Maybe<Scalars['String']['output']>;
};

export type Project = Node & Document & {
  __typename?: 'Project';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  date: Scalars['String']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  status: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  gallery?: Maybe<Array<Maybe<ProjectGallery>>>;
  excerpt?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
  techStack?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  metrics?: Maybe<ProjectMetrics>;
  projectUrl?: Maybe<Scalars['String']['output']>;
  githubUrl?: Maybe<Scalars['String']['output']>;
  category: Scalars['String']['output'];
  color?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectGalleryFilter = {
  image?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectMetricsFilter = {
  roi?: InputMaybe<StringFilter>;
  engagement?: InputMaybe<StringFilter>;
  efficiency?: InputMaybe<StringFilter>;
  custom1Label?: InputMaybe<StringFilter>;
  custom1Value?: InputMaybe<StringFilter>;
  custom2Label?: InputMaybe<StringFilter>;
  custom2Value?: InputMaybe<StringFilter>;
};

export type ProjectFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  featured?: InputMaybe<BooleanFilter>;
  status?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  gallery?: InputMaybe<ProjectGalleryFilter>;
  excerpt?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  techStack?: InputMaybe<StringFilter>;
  metrics?: InputMaybe<ProjectMetricsFilter>;
  projectUrl?: InputMaybe<StringFilter>;
  githubUrl?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
};

export type ProjectConnectionEdges = {
  __typename?: 'ProjectConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Project>;
};

export type ProjectConnection = Connection & {
  __typename?: 'ProjectConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProjectConnectionEdges>>>;
};

export type PostSeo = {
  __typename?: 'PostSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  date: Scalars['String']['output'];
  status: Scalars['String']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  heroImage?: Maybe<Scalars['String']['output']>;
  excerpt?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  category: Scalars['String']['output'];
  readTime?: Maybe<Scalars['Float']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  seo?: Maybe<PostSeo>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type PostSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  status?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  heroImage?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
  tags?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  readTime?: InputMaybe<NumberFilter>;
  author?: InputMaybe<StringFilter>;
  seo?: InputMaybe<PostSeoFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type GalleryImage = Node & Document & {
  __typename?: 'GalleryImage';
  title: Scalars['String']['output'];
  image: Scalars['String']['output'];
  alt: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  category: Scalars['String']['output'];
  tool?: Maybe<Scalars['String']['output']>;
  date: Scalars['String']['output'];
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type GalleryImageFilter = {
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  tool?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  tags?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
};

export type GalleryImageConnectionEdges = {
  __typename?: 'GalleryImageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<GalleryImage>;
};

export type GalleryImageConnection = Connection & {
  __typename?: 'GalleryImageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GalleryImageConnectionEdges>>>;
};

export type SiteSettingsSite = {
  __typename?: 'SiteSettingsSite';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  favicon?: Maybe<Scalars['String']['output']>;
};

export type SiteSettingsSocial = {
  __typename?: 'SiteSettingsSocial';
  twitter?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  github?: Maybe<Scalars['String']['output']>;
  instagram?: Maybe<Scalars['String']['output']>;
};

export type SiteSettingsSeo = {
  __typename?: 'SiteSettingsSeo';
  defaultTitle?: Maybe<Scalars['String']['output']>;
  defaultDescription?: Maybe<Scalars['String']['output']>;
  defaultImage?: Maybe<Scalars['String']['output']>;
};

export type SiteSettings = Node & Document & {
  __typename?: 'SiteSettings';
  site?: Maybe<SiteSettingsSite>;
  social?: Maybe<SiteSettingsSocial>;
  seo?: Maybe<SiteSettingsSeo>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SiteSettingsSiteFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  favicon?: InputMaybe<ImageFilter>;
};

export type SiteSettingsSocialFilter = {
  twitter?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringFilter>;
  instagram?: InputMaybe<StringFilter>;
};

export type SiteSettingsSeoFilter = {
  defaultTitle?: InputMaybe<StringFilter>;
  defaultDescription?: InputMaybe<StringFilter>;
  defaultImage?: InputMaybe<ImageFilter>;
};

export type SiteSettingsFilter = {
  site?: InputMaybe<SiteSettingsSiteFilter>;
  social?: InputMaybe<SiteSettingsSocialFilter>;
  seo?: InputMaybe<SiteSettingsSeoFilter>;
};

export type SiteSettingsConnectionEdges = {
  __typename?: 'SiteSettingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SiteSettings>;
};

export type SiteSettingsConnection = Connection & {
  __typename?: 'SiteSettingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteSettingsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateProject: Project;
  createProject: Project;
  updatePost: Post;
  createPost: Post;
  updateGalleryImage: GalleryImage;
  createGalleryImage: GalleryImage;
  updateSiteSettings: SiteSettings;
  createSiteSettings: SiteSettings;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateProjectArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectMutation;
};


export type MutationCreateProjectArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateGalleryImageArgs = {
  relativePath: Scalars['String']['input'];
  params: GalleryImageMutation;
};


export type MutationCreateGalleryImageArgs = {
  relativePath: Scalars['String']['input'];
  params: GalleryImageMutation;
};


export type MutationUpdateSiteSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteSettingsMutation;
};


export type MutationCreateSiteSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteSettingsMutation;
};

export type DocumentUpdateMutation = {
  project?: InputMaybe<ProjectMutation>;
  post?: InputMaybe<PostMutation>;
  galleryImage?: InputMaybe<GalleryImageMutation>;
  siteSettings?: InputMaybe<SiteSettingsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  project?: InputMaybe<ProjectMutation>;
  post?: InputMaybe<PostMutation>;
  galleryImage?: InputMaybe<GalleryImageMutation>;
  siteSettings?: InputMaybe<SiteSettingsMutation>;
};

export type ProjectGalleryMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  caption?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectMetricsMutation = {
  roi?: InputMaybe<Scalars['String']['input']>;
  engagement?: InputMaybe<Scalars['String']['input']>;
  efficiency?: InputMaybe<Scalars['String']['input']>;
  custom1Label?: InputMaybe<Scalars['String']['input']>;
  custom1Value?: InputMaybe<Scalars['String']['input']>;
  custom2Label?: InputMaybe<Scalars['String']['input']>;
  custom2Value?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<InputMaybe<ProjectGalleryMutation>>>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  techStack?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  metrics?: InputMaybe<ProjectMetricsMutation>;
  projectUrl?: InputMaybe<Scalars['String']['input']>;
  githubUrl?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
};

export type PostSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  category?: InputMaybe<Scalars['String']['input']>;
  readTime?: InputMaybe<Scalars['Float']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  seo?: InputMaybe<PostSeoMutation>;
};

export type GalleryImageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  tool?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SiteSettingsSiteMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  favicon?: InputMaybe<Scalars['String']['input']>;
};

export type SiteSettingsSocialMutation = {
  twitter?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  github?: InputMaybe<Scalars['String']['input']>;
  instagram?: InputMaybe<Scalars['String']['input']>;
};

export type SiteSettingsSeoMutation = {
  defaultTitle?: InputMaybe<Scalars['String']['input']>;
  defaultDescription?: InputMaybe<Scalars['String']['input']>;
  defaultImage?: InputMaybe<Scalars['String']['input']>;
};

export type SiteSettingsMutation = {
  site?: InputMaybe<SiteSettingsSiteMutation>;
  social?: InputMaybe<SiteSettingsSocialMutation>;
  seo?: InputMaybe<SiteSettingsSeoMutation>;
};


export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
  
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.5/content/local/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  